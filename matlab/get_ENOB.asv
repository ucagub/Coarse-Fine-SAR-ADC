function output = get_ENOB(iter, varargin)
    %inputs: iter number of simulations
    %      : res bit resolution, dac_type, mismatch in dac for adc to be characterized    
    %return: the mostlikely ENOB

    buff = zeros(1,iter);
    num_arg = nargin;
    if nargin == 4
        inputs = [varargin{1} varargin{2} varargin{3}];
    elseif nargin == 7
        inputs = [varargin{1} varargin{2} varargin{3} varargin{4} varargin{5} varargin{6}];
    end
    
    %parfor j = 1:iter
    for j = 1:iter
        %dac = DAC(8);
        if num_arg == 4
            adc = ADC(inputs.res, inputs.dac_type, inputs.mismatch);
        elseif num_arg == 7
            res = inputs(1); 
            k = inputs(2);
            coarse_dac_type = inputs(3);
            coarse_mismatch = inputs(4);
            fine_dac_type = inputs(5);
            fine_mismatch = inputs(6);
            adc = ADC(inputs.res, inputs.k, inputs.coarse_dac_type, inputs.coarse_mismatch, inputs.fine_dac_type, inputs.fine_mismatch);
        end
        fs = 3.15e4;
        f0 = 5e2;
        N = 1024*2;
        t = (0:N-1)/fs;

        y = 0.5*sin(2*pi*f0*t) + 0.5;
        z = zeros(1, length(y));
        for i = 1:length(y)
            z(i) = adc.quantizer(y(i));
        end
        %figure;
        %sinad(z,fs)
        b = sinad(z,fs);
        ENOB = (b-1.76)/6.02; 
        buff(j) = ENOB;
    end
    figure('Name', [int2str(res) '_' dac_type '_' num2str(mismatch)]);
    h = histogram(buff, 'Normalization', 'pdf');
    xlabel('ENOB');
    ylabel('pdf');
    %savefig(['ENOB_hist/8bit_multistep_CS/' int2str(res) '_' dac_type '_' num2str(mismatch) '.fig']);
    left_edge = find(h.Values == max(h.Values));
    buff2 = mean(h.BinEdges(left_edge:left_edge+1));
    %close
    output = buff2;
end